// <auto-generated />
using System;
using MAP_Web.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MAP_Web.Migrations
{
    [DbContext(typeof(MAP_Context))]
    [Migration("20181017050946_addMAPModels")]
    partial class addMAPModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MAP_Web.Models.AdditionalFacility", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("RequestDesc");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("userScreenFlow");

                    b.HasKey("Id");

                    b.ToTable("AdditionalFacility");
                });

            modelBuilder.Entity("MAP_Web.Models.ApprovalSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalCount");

                    b.Property<string>("Rank");

                    b.Property<int>("RequestType");

                    b.Property<bool>("WithException");

                    b.Property<bool>("WithRequirements");

                    b.HasKey("Id");

                    b.ToTable("ApprovalSetup");
                });

            modelBuilder.Entity("MAP_Web.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("DateLoged");

                    b.Property<string>("Entity");

                    b.Property<string>("NewValues");

                    b.Property<string>("OldValues");

                    b.Property<string>("TrackingNo");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("MAP_Web.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AMEXActivationReason");

                    b.Property<int?>("AMEXCanceledReason");

                    b.Property<string>("AMEXCardAcceptorId");

                    b.Property<string>("AMEXKeyAcctIND");

                    b.Property<string>("AMEXRiskIND");

                    b.Property<int?>("AMEXRoleCode");

                    b.Property<int?>("BranchAffiliationId");

                    b.Property<string>("CUPCardAcceptorId");

                    b.Property<int?>("CUPTaxCode");

                    b.Property<DateTime?>("CUPTaxExemptExpiryDate");

                    b.Property<string>("CUPTaxNumber");

                    b.Property<int>("City_Id");

                    b.Property<string>("DBAName");

                    b.Property<DateTime?>("DTIBusinessRegDate");

                    b.Property<string>("JCBAcceptorId");

                    b.Property<int?>("JCBRevisionRSN");

                    b.Property<int?>("JCBSchemeClosereason");

                    b.Property<int?>("JCBSchemeRevisionReason");

                    b.Property<int>("MCC_Id");

                    b.Property<int?>("NewAffiliationId");

                    b.Property<int?>("OcularInspectionFormId");

                    b.Property<int?>("POSRequestId");

                    b.Property<DateTime?>("SECRegDate");

                    b.Property<string>("SOAEmailAddress");

                    b.Property<string>("SOARecipients");

                    b.Property<string>("TIN");

                    b.Property<string>("accountFacility");

                    b.Property<string>("acctLoanNo");

                    b.Property<string>("acquirerInstitutionName");

                    b.Property<string>("adminContactperson");

                    b.Property<int>("amexRating");

                    b.Property<string>("aoCode");

                    b.Property<int?>("areaMallCode");

                    b.Property<int>("bdoPayRating");

                    b.Property<int>("bdoPaySegment");

                    b.Property<string>("branch");

                    b.Property<string>("branchCode");

                    b.Property<bool>("cardHolderData");

                    b.Property<string>("cardHolderDataTobeStored");

                    b.Property<int?>("cardPlan");

                    b.Property<int?>("checkDeliveryCode");

                    b.Property<int?>("closedreason");

                    b.Property<bool>("computeCWT");

                    b.Property<string>("controlNo");

                    b.Property<DateTime?>("currentDate");

                    b.Property<string>("customerNo");

                    b.Property<bool>("custr");

                    b.Property<DateTime?>("dateClosed");

                    b.Property<string>("dbaAddress1");

                    b.Property<string>("dbaAddress2");

                    b.Property<string>("dbaAddress3");

                    b.Property<string>("dbaAddress4");

                    b.Property<int?>("dbaCity");

                    b.Property<int>("dbaZipCode");

                    b.Property<int>("debitMailingAddressCity");

                    b.Property<int>("debitMailingAddressZipCode");

                    b.Property<string>("debitMerchantNo");

                    b.Property<string>("debitSettlementAcctNo");

                    b.Property<decimal>("discountDebitRate");

                    b.Property<bool>("ecrForInstallation");

                    b.Property<string>("emailAddress");

                    b.Property<string>("emailAddressForReport");

                    b.Property<string>("feeAccount");

                    b.Property<string>("financialInstitution");

                    b.Property<string>("forMoto");

                    b.Property<string>("ftpDir");

                    b.Property<bool>("genPayment");

                    b.Property<string>("goodsServices");

                    b.Property<string>("holdOutAcctNo");

                    b.Property<string>("holdOutAmount");

                    b.Property<string>("imprinterAMEX");

                    b.Property<string>("imprinterDC");

                    b.Property<string>("imprinterJCB");

                    b.Property<string>("imprinterOthers");

                    b.Property<string>("imprinterPlateName");

                    b.Property<string>("imprinterPlateNumbers");

                    b.Property<int?>("imprinterTotal");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isAffiliated");

                    b.Property<bool>("isPartnershipCorp");

                    b.Property<bool>("isSingleProp");

                    b.Property<bool>("isSwipingCardWithInstalledECR");

                    b.Property<bool>("isSwipingCardWithoutInstalledECR");

                    b.Property<string>("legalName");

                    b.Property<string>("loanTerm");

                    b.Property<string>("mailingAddress1");

                    b.Property<string>("mailingAddress2");

                    b.Property<string>("mailingAddress3");

                    b.Property<string>("mailingAddress4");

                    b.Property<int>("mailingAddressZipCode");

                    b.Property<int>("mailingCity");

                    b.Property<int>("mcId");

                    b.Property<string>("mdf");

                    b.Property<string>("mdfChecker");

                    b.Property<DateTime?>("mdfDateTimeChecked");

                    b.Property<DateTime?>("mdfDateTimeCreated");

                    b.Property<string>("mdfMaker");

                    b.Property<int?>("merchantGrade");

                    b.Property<string>("merchantGroupCode");

                    b.Property<string>("midCount");

                    b.Property<DateTime?>("midDateTimeCreated");

                    b.Property<string>("mobileNo");

                    b.Property<int>("noOfPos");

                    b.Property<string>("notedBy");

                    b.Property<string>("notedDate");

                    b.Property<string>("owningMerchant");

                    b.Property<int?>("payDelayDays");

                    b.Property<string>("payeesName");

                    b.Property<string>("paymentMode");

                    b.Property<string>("phoneNo");

                    b.Property<bool>("postMaintReview");

                    b.Property<DateTime?>("postMaintReviewDate");

                    b.Property<string>("preparedBy");

                    b.Property<DateTime?>("preparedDate");

                    b.Property<int>("principalCity");

                    b.Property<int>("principalCivilStatus");

                    b.Property<DateTime?>("principalDateOfBirth");

                    b.Property<string>("principalFbName");

                    b.Property<string>("principalFirstName");

                    b.Property<int>("principalHomeOwnership");

                    b.Property<string>("principalLastName");

                    b.Property<string>("principalMiddleName");

                    b.Property<string>("principalName1");

                    b.Property<string>("principalName2");

                    b.Property<string>("principalName3");

                    b.Property<string>("principalName4");

                    b.Property<string>("principalName5");

                    b.Property<string>("principalPermanentAddress");

                    b.Property<string>("principalPhoneNo");

                    b.Property<int>("principalZipCode");

                    b.Property<int?>("regionCode");

                    b.Property<string>("registeredBusinessNo");

                    b.Property<string>("remarks");

                    b.Property<bool>("reportDistributionperCompany");

                    b.Property<bool>("reportPerBranch");

                    b.Property<string>("reportPerCompanysBranch");

                    b.Property<int?>("schemeAreaCode1");

                    b.Property<int?>("schemeAreaCode2");

                    b.Property<int>("sendBdo030114");

                    b.Property<string>("serviceProvider");

                    b.Property<string>("settlementAcctNo");

                    b.Property<bool>("settlementPerBranch");

                    b.Property<bool>("smsSending");

                    b.Property<string>("spouseAddress");

                    b.Property<int>("spouseCity");

                    b.Property<string>("spouseFirstName");

                    b.Property<string>("spouseLastName");

                    b.Property<string>("spouseMiddleName");

                    b.Property<string>("spousePhoneNo");

                    b.Property<int>("spouseZipCode");

                    b.Property<string>("storeId");

                    b.Property<int>("strategicMerchant");

                    b.Property<DateTime?>("taxExemptFrom");

                    b.Property<int>("taxExemptIssuedBy");

                    b.Property<DateTime?>("taxExemptTo");

                    b.Property<string>("tidCount");

                    b.Property<DateTime?>("tidDateTimeCreated");

                    b.Property<string>("tradeContactNo");

                    b.Property<string>("tradeCustomerName");

                    b.Property<int>("tranSource");

                    b.Property<string>("website");

                    b.Property<bool>("withAcquirer");

                    b.Property<bool>("withDependency");

                    b.Property<bool>("withECR");

                    b.Property<bool>("withTax");

                    b.HasKey("Id");

                    b.HasIndex("BranchAffiliationId");

                    b.HasIndex("NewAffiliationId");

                    b.HasIndex("OcularInspectionFormId");

                    b.HasIndex("POSRequestId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("MAP_Web.Models.BranchAffiliation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("CustomerId");

                    b.Property<bool>("WithException");

                    b.Property<bool>("WithRequirements");

                    b.Property<string>("eMail");

                    b.Property<string>("userScreenFlow");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BranchAffiliation");
                });

            modelBuilder.Entity("MAP_Web.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtiSecDate");

                    b.Property<string>("LegalName");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MAP_Web.Models.CustomerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LegalName");

                    b.Property<int>("Ownership");

                    b.HasKey("Id");

                    b.ToTable("CustomerProfile");
                });

            modelBuilder.Entity("MAP_Web.Models.DocumentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DocumentList");
                });

            modelBuilder.Entity("MAP_Web.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("MAP_Web.Models.FileMaintenance", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("LegalEntityId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("userScreenFlow");

                    b.HasKey("Id");

                    b.HasIndex("LegalEntityId");

                    b.ToTable("FileMaintenance");
                });

            modelBuilder.Entity("MAP_Web.Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action");

                    b.Property<DateTime>("date");

                    b.Property<string>("groupCode");

                    b.Property<string>("remarks");

                    b.Property<string>("user");

                    b.HasKey("HistoryId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("MAP_Web.Models.LegalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LegalEntity");
                });

            modelBuilder.Entity("MAP_Web.Models.MAEF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("affiliation");

                    b.Property<string>("appearance");

                    b.Property<string>("approvedBy");

                    b.Property<int?>("creditMidCount");

                    b.Property<string>("currency");

                    b.Property<int?>("debitTidCount");

                    b.Property<string>("declinedRemarks");

                    b.Property<string>("holdoutAmt");

                    b.Property<string>("isBdoAccountNo");

                    b.Property<bool?>("isDeclined");

                    b.Property<bool?>("isLargeAccount");

                    b.Property<bool?>("isSignatureVerified");

                    b.Property<int?>("location");

                    b.Property<bool?>("mccCorrect");

                    b.Property<string>("midCap");

                    b.Property<string>("natureOfBusiness");

                    b.Property<string>("payDelay");

                    b.Property<string>("pepList");

                    b.Property<string>("pepListRemarks");

                    b.Property<bool?>("permanentWaiver");

                    b.Property<string>("personalAccountNo");

                    b.Property<string>("processedBy");

                    b.Property<string>("psv");

                    b.Property<int?>("requestType");

                    b.Property<bool?>("simulDebit");

                    b.Property<bool?>("simulInstallment");

                    b.Property<string>("tangent");

                    b.Property<bool?>("tempoWaiver");

                    b.Property<bool?>("withException");

                    b.Property<bool?>("withRequirements");

                    b.Property<bool?>("withTelephone");

                    b.HasKey("Id");

                    b.ToTable("MAEF");
                });

            modelBuilder.Entity("MAP_Web.Models.MaintenanceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("MaintenanceMasterId");

                    b.Property<int>("SubCategoryId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Value");

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceMasterId");

                    b.ToTable("MaintenanceDetails");
                });

            modelBuilder.Entity("MAP_Web.Models.MaintenanceMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceMaster");
                });

            modelBuilder.Entity("MAP_Web.Models.MerchantGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("description");

                    b.HasKey("Id");

                    b.ToTable("MerchantGroupView");
                });

            modelBuilder.Entity("MAP_Web.Models.MQRRequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("Approver");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Rank");

                    b.Property<int?>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("MQRRequestApproval");
                });

            modelBuilder.Entity("MAP_Web.Models.MQRRequiredApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rank");

                    b.Property<int?>("RequestId");

                    b.Property<string>("User");

                    b.Property<bool>("isApproved");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("MQRRequiredApproval");
                });

            modelBuilder.Entity("MAP_Web.Models.NewAffiliation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("CustomerId");

                    b.Property<int>("Status");

                    b.Property<string>("eMail");

                    b.Property<string>("userScreenFlow");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("NewAffiliation");
                });

            modelBuilder.Entity("MAP_Web.Models.OcularInspectionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("adverseFindings");

                    b.Property<string>("averageRegistration");

                    b.Property<int?>("averageTransactions");

                    b.Property<string>("businessHours");

                    b.Property<string>("businessSignage");

                    b.Property<DateTime?>("dateOfLastEvent");

                    b.Property<string>("equipment");

                    b.Property<string>("establishments");

                    b.Property<int?>("expectedNoOfBuyers");

                    b.Property<string>("exteriorAppearance");

                    b.Property<string>("floorArea");

                    b.Property<string>("inclusiveDateOfEvent");

                    b.Property<string>("incompleteReport");

                    b.Property<string>("interiorAppearance");

                    b.Property<string>("lengthOfStay");

                    b.Property<int?>("location");

                    b.Property<string>("motoMarketingChannel");

                    b.Property<string>("nameOfEvent");

                    b.Property<string>("nameOfLastAcquirer");

                    b.Property<string>("nameOfLastEvent");

                    b.Property<string>("natureOfBusiness");

                    b.Property<int?>("noOfEmployeesContractual");

                    b.Property<int?>("noOfEmployeesFullTime");

                    b.Property<int?>("noOfParticipants");

                    b.Property<string>("noOfYearsOperating");

                    b.Property<string>("outletAddress");

                    b.Property<string>("outletContactPerson");

                    b.Property<string>("outletContactPosition");

                    b.Property<string>("outletMobileNo");

                    b.Property<string>("outletTelephoneNo");

                    b.Property<int?>("outletTypeOfBusiness");

                    b.Property<bool>("outskirt");

                    b.Property<int?>("premiseStatus");

                    b.Property<int?>("premiseType");

                    b.Property<string>("priceRange");

                    b.Property<string>("products");

                    b.Property<string>("remarks");

                    b.Property<string>("stocks");

                    b.Property<string>("totalSales");

                    b.Property<int?>("typeOfEvent");

                    b.Property<string>("venue");

                    b.Property<string>("venueOfLastEvent");

                    b.Property<bool>("waived");

                    b.Property<bool?>("withHighTraffic");

                    b.HasKey("Id");

                    b.ToTable("OcularInspectionForm");
                });

            modelBuilder.Entity("MAP_Web.Models.POSRequest", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("RequestDescription");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("WorkflowInstanceId");

                    b.Property<string>("userScreenFlow");

                    b.HasKey("Id");

                    b.ToTable("POSRequest");
                });

            modelBuilder.Entity("MAP_Web.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookMark");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("HistoryId");

                    b.Property<bool>("Insuff");

                    b.Property<int?>("MAEFId");

                    b.Property<int>("MQRStatus");

                    b.Property<string>("RequestDescription");

                    b.Property<int>("RequestType");

                    b.Property<int>("Status");

                    b.Property<string>("TrackingNo");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("WorkflowInstanceId");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("MAEFId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("MAP_Web.Models.RequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("Approver");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Rank");

                    b.Property<int?>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestApproval");
                });

            modelBuilder.Entity("MAP_Web.Models.RequiredApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rank");

                    b.Property<int?>("RequestId");

                    b.Property<string>("User");

                    b.Property<bool>("isApproved");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequiredApproval");
                });

            modelBuilder.Entity("MAP_Web.Models.AdditionalFacility", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithOne("AdditionalFacility")
                        .HasForeignKey("MAP_Web.Models.AdditionalFacility", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MAP_Web.Models.Branch", b =>
                {
                    b.HasOne("MAP_Web.Models.BranchAffiliation")
                        .WithMany("Branches")
                        .HasForeignKey("BranchAffiliationId");

                    b.HasOne("MAP_Web.Models.NewAffiliation")
                        .WithMany("Branches")
                        .HasForeignKey("NewAffiliationId");

                    b.HasOne("MAP_Web.Models.OcularInspectionForm", "OcularInspectionForm")
                        .WithMany()
                        .HasForeignKey("OcularInspectionFormId");

                    b.HasOne("MAP_Web.Models.POSRequest", "POSRequest")
                        .WithMany()
                        .HasForeignKey("POSRequestId");
                });

            modelBuilder.Entity("MAP_Web.Models.BranchAffiliation", b =>
                {
                    b.HasOne("MAP_Web.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithOne("BranchAffiliation")
                        .HasForeignKey("MAP_Web.Models.BranchAffiliation", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MAP_Web.Models.FileMaintenance", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithOne("FileMaintenance")
                        .HasForeignKey("MAP_Web.Models.FileMaintenance", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MAP_Web.Models.LegalEntity", "LegalEntity")
                        .WithMany()
                        .HasForeignKey("LegalEntityId");
                });

            modelBuilder.Entity("MAP_Web.Models.LegalEntity", b =>
                {
                    b.HasOne("MAP_Web.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("MAP_Web.Models.MaintenanceDetails", b =>
                {
                    b.HasOne("MAP_Web.Models.MaintenanceMaster", "MaintenanceMaster")
                        .WithMany("MaintenanceDetails")
                        .HasForeignKey("MaintenanceMasterId");
                });

            modelBuilder.Entity("MAP_Web.Models.MQRRequestApproval", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithMany("MQRRequestApprovals")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("MAP_Web.Models.MQRRequiredApproval", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithMany("MQRRequiredApprovals")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("MAP_Web.Models.NewAffiliation", b =>
                {
                    b.HasOne("MAP_Web.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithOne("NewAffiliation")
                        .HasForeignKey("MAP_Web.Models.NewAffiliation", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MAP_Web.Models.POSRequest", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithOne("POSRequest")
                        .HasForeignKey("MAP_Web.Models.POSRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MAP_Web.Models.Request", b =>
                {
                    b.HasOne("MAP_Web.Models.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("MAP_Web.Models.MAEF", "MAEF")
                        .WithMany()
                        .HasForeignKey("MAEFId");
                });

            modelBuilder.Entity("MAP_Web.Models.RequestApproval", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithMany("Approvals")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("MAP_Web.Models.RequiredApproval", b =>
                {
                    b.HasOne("MAP_Web.Models.Request", "Request")
                        .WithMany("RequiredApprovals")
                        .HasForeignKey("RequestId");
                });
#pragma warning restore 612, 618
        }
    }
}
